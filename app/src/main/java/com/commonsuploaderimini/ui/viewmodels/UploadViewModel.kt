package com.commonsuploaderimini.ui.viewmodels

import android.app.Application
import android.net.Uri
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.commonsuploaderimini.firestore.FirestoreRepository
import com.commonsuploaderimini.models.ImageUpload
import com.commonsuploaderimini.upload.UploadManager
import com.commonsuploaderimini.utils.ExifUtils
import com.commonsuploaderimini.utils.NetworkManager
import com.commonsuploaderimini.upload.OfflineUploadWorker
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class UploadViewModel(application: Application) : AndroidViewModel(application) {
    private val uploadManager = UploadManager(application)
    private val firestoreRepository = FirestoreRepository()
    private val offlineQueueManager = OfflineQueueManager(application)
    private val networkManager = NetworkManager(application)
    
    private val _uploadState = MutableStateFlow<UploadState>(UploadState.Idle)
    val uploadState: StateFlow<UploadState> = _uploadState.asStateFlow()
    
    private val _uploads = MutableStateFlow<List<ImageUpload>>(emptyList())
    val uploads: StateFlow<List<ImageUpload>> = _uploads.asStateFlow()
    
    private val _selectedImageUri = MutableStateFlow<Uri?>(null)
    val selectedImageUri: StateFlow<Uri?> = _selectedImageUri.asStateFlow()
    
    private val _autoGeneratedTitle = MutableStateFlow("")
    val autoGeneratedTitle: StateFlow<String> = _autoGeneratedTitle.asStateFlow()
    
    sealed class UploadState {
        object Idle : UploadState()
        object Uploading : UploadState()
        data class Success(val upload: ImageUpload) : UploadState()
        data class Error(val message: String) : UploadState()
    }
    
    init {
        loadUploads()
    }
    
    fun selectImage(uri: Uri) {
        _selectedImageUri.value = uri
        generateAutoTitle(uri)
    }
    
    private fun generateAutoTitle(uri: Uri) {
        viewModelScope.launch {
            try {
                val exifData = ExifUtils.extractExifData(getApplication(), uri)
                val fileName = uri.lastPathSegment ?: "image"
                val title = ExifUtils.generateTitleFromExif(exifData, fileName)
                _autoGeneratedTitle.value = title
            } catch (e: Exception) {
                _autoGeneratedTitle.value = ""
            }
        }
    }
    
    fun uploadImage(
        uri: Uri,
        title: String,
        description: String,
        language: String
    ) {
        viewModelScope.launch {
            _uploadState.value = UploadState.Uploading
            
            try {
                val exifData = ExifUtils.extractExifData(getApplication(), uri)
                
                if (networkManager.isNetworkAvailable()) {
                    // Upload immediately
                    val result = uploadManager.uploadImage(uri, title, description, language, exifData)
                    
                    if (result.isSuccess) {
                        _uploadState.value = UploadState.Success(result.getOrThrow())
                        loadUploads()
                    } else {
                        _uploadState.value = UploadState.Error(
                            result.exceptionOrNull()?.message ?: "Upload failed"
                        )
                    }
                } else {
                    // Add to offline queue
                    val queuedUpload = ImageUpload(
                        title = title,
                        description = description,
                        language = language,
                        localPath = uri.toString(),
                        uploadStatus = UploadStatus.QUEUED,
                        exifData = exifData
                    )
                    
                    offlineQueueManager.addToQueue(queuedUpload)
                    _uploadState.value = UploadState.Success(queuedUpload)
                    
                    // Schedule background upload when network becomes available
                    OfflineUploadWorker.enqueue(getApplication())
                }
            } catch (e: Exception) {
                _uploadState.value = UploadState.Error(e.message ?: "Upload failed")
            }
        }
    }
    
    fun loadUploads() {
        viewModelScope.launch {
            try {
                val result = firestoreRepository.getImageUploads()
                if (result.isSuccess) {
                    _uploads.value = result.getOrThrow()
                }
            } catch (e: Exception) {
                // Handle error silently for now
            }
        }
    }
    
    fun resetUploadState() {
        _uploadState.value = UploadState.Idle
        _selectedImageUri.value = null
        _autoGeneratedTitle.value = ""
    }
    
    fun deleteUpload(uploadId: String) {
        viewModelScope.launch {
            try {
                firestoreRepository.deleteImageUpload(uploadId)
                loadUploads()
            } catch (e: Exception) {
                // Handle error
            }
        }
    }
}
